<# // L2ST4 - LINQ to SQL templates for T4 v0.85 - http://www.codeplex.com/l2st4
// Copyright (c) Microsoft Corporation.  All rights reserved.
// This source code is made available under the terms of the Microsoft Public License (MS-PL)
#><#@ template hostspecific="True"
#><#@ include file="L2ST4.ttinclude"
#><#@ output extension=".generated.cs"
#><# // Set options here
var options = new {
	DbmlFileName = Host.TemplateFile.Replace(".tt",".dbml"), // Which DBML file to operate on (same filename as template)
	SerializeDataContractSP1 = false, // Emit SP1 DataContract serializer attributes
	FilePerEntity = true, // Put each class into a separate file
	StoredProcedureConcurrency = false, // Table updates via an SP require @@rowcount to be returned to enable concurrency
    PathToSQLMetal = @"C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin\SQLMetal.exe"
};

//----------
//auto genarate dbml file.
//----------
//first make dbml writeable
if(File.Exists(options.DbmlFileName))
{
    FileAttributes attributes = File.GetAttributes(options.DbmlFileName);
    File.SetAttributes(options.DbmlFileName, attributes & ~FileAttributes.ReadOnly);
}
string sqlMetalArgs = string.Format("/server:localhost /database:CMS /user:sa /password:123456  /dbml:\"{0}\" /context:Database", options.DbmlFileName);
//for column description
ConnectionString = "Data Source=localhost;database=CMS;uid=sa;pwd=123456";
string sRes = "";
System.Diagnostics.ProcessStartInfo oInfo = new System.Diagnostics.ProcessStartInfo(options.PathToSQLMetal, sqlMetalArgs);
oInfo.UseShellExecute = false;
oInfo.ErrorDialog = false;
oInfo.CreateNoWindow = true;
oInfo.RedirectStandardOutput = true;
try
{
    System.Diagnostics.Process p = System.Diagnostics.Process.Start(oInfo);
    System.IO.StreamReader oReader2 = p.StandardOutput;
    sRes = oReader2.ReadToEnd();
    oReader2.Close();
}
catch (Exception ex)
{
    sRes = "ERROR: " + ex.Message;
	System.Diagnostics.Debug.Write(sRes);
}
//auto genarate dbml finished.

var code = new CSharpCodeLanguage();
var data = new Data(options.DbmlFileName);
var manager = Manager.Create(Host, GenerationEnvironment);
//--------
//data.ContextNamespace = "WL.CRM.DataAccess";//since we do not use DataContext class, the ContextNamespace is useless too.
data.EntityNamespace = "CMS.DAL";
var columnDescription = GetColumnDescriptions();
//--------
manager.StartHeader();
#>#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//     Modified by ZEN 6/7/2010 removed LINQ to SQL feathers.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using Common;
using CMS.Model;
<#if (data.Functions.Count > 0) {#>
using System.Reflection;
<#}
string dataContractAttributes = (options.SerializeDataContractSP1) ? "IsReference=true" : "";
if (data.Serialization) {#>
using System.Runtime.Serialization;
<#}#>
<# manager.EndBlock();#>
<#	var tableOperations = new List<TableOperation>();
	foreach(var table in data.Tables)
		tableOperations.AddRange(table.Operations);
	foreach(Table table in data.Tables)
		foreach(OperationType operationType in Enum.GetValues(typeof(OperationType)))
			if (!tableOperations.Any(o => (o.Table == table) && (o.Type == operationType))) {#>
<#}#>
<#if(data.Tables.Count > 0) {#>
<#}
if (data.Functions.Count > 0) {#>
<#	if (tableOperations.Count > 0) { #>
<#	}
}#>
<#
foreach(Table table in data.Tables) {
	foreach(TableClass class1 in table.Classes) {
		manager.StartNewFile(Path.ChangeExtension(class1.Name,".generated.cs"));
		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>

namespace <#=data.EntityNamespace#>
{	
<#		}
		if (data.Serialization && class1.IsSerializable) {
#>	[DataContract(<#=dataContractAttributes#>)]
<#		}
		if (class1 == table.BaseClass) {#>
<#			foreach(TableClass subclass in data.TableClasses.Where(c => c.Table == table)) {
				if (!String.IsNullOrEmpty(subclass.InheritanceCode)) {#>
	[InheritanceMapping(Code=@"<#=subclass.InheritanceCode#>", Type=typeof(<#=subclass.Name#>)<# if (subclass.IsInheritanceDefault) {#>, IsDefault=true<#}#>)]
<#				}
				if (data.Serialization && subclass.IsSerializable) {#>[KnownType(typeof(<#=subclass.Name#>))]<#}
			}
#>	<#=code.Format(class1.TypeAttributes)#>partial class <#=class1.Name#>DAL : BaseDAL<<#=class1.Name#>> <#if (!String.IsNullOrEmpty(data.EntityBase)) {#>: <#=data.EntityBase#> <#}#>
	{
<#		} else {
#>	<#=code.Format(class1.TypeAttributes)#>partial class <#=class1.Name#> : <#=class1.SuperClass.Name#>
	{
<#		}#>

		#region Construction
		public <#=class1.Name#>DAL()
		{
		}
		#endregion

<#		int dataMemberIndex = 1;
		if (false) {
#>		#region Column Mappings
<#			foreach(Column column in class1.Columns) {#>
		private <#=code.Format(column.StorageType)#> <#=column.Storage#><# if (column.IsReadOnly) {#> = default(<#=code.Format(column.StorageType)#>)<#}#>;
		/// <summary>
		/// <#= GetCurrentDescription(columnDescription, table.Name, column.Name) #>
        /// </summary>
		[Column(<#
				if (column.Name != column.Member) {#><#}
				if (!String.IsNullOrEmpty(column.DbType)) {#>DbType=@"<#=column.DbType#>"<#}
				if (column.IsPrimaryKey) {#>, IsPrimaryKey=true<#}
				if (column.IsDiscriminator) {#>, IsDiscriminator=true<#}
				if (column.IsDbGenerated) {#><#}
				if (!column.CanBeNull && !column.IsPrimaryKey) {#>, CanBeNull=false<#}
				if (column.UpdateCheck != UpdateCheck.Always) {#><#}
				if (!String.IsNullOrEmpty(column.Expression)) {#>, Expression=@"<#=column.Expression#>"<#}
		#>)]
<#				if (data.Serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) {
#>		[DataMember(Order=<#=dataMemberIndex++#>)]
<#				}
#>		<#=code.Format(column.MemberAttributes)#><#=code.Format(column.Type)#> <#=column.Member#>
		{
			get { return <#=column.StorageValue#>; }
<#				if (!column.IsReadOnly) { #>
			set {
				if (<#=column.StorageValue#> != value) {
					<#=column.StorageValue#> = value;
				}
			}
<#				}#>
		}
		
<#			}#>
		#endregion
<#		}
		bool needsSerializationFlag = class1.IsSerializable && class1.Associations.Any(a => !a.ManagesKeys);
		if (class1.Associations.Count > 0) {//Associations has been deleted.
#>		
<#		}
		if (data.Serialization) {#>
		
		#region Serialization
<#			if (needsSerializationFlag) {#>
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
<#			}#>
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public <#if (class1 != table.BaseClass) {#>new<#}#> void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
<#		}
#>	}
<#		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>
}
<#		}
		manager.EndBlock();
	}
}
if (data.FunctionClasses.Count > 0) {
	foreach(FunctionClass class1 in data.FunctionClasses) {
		manager.StartNewFile(Path.ChangeExtension(class1.Name,".generated.cs"));
		if(!String.IsNullOrEmpty(data.EntityNamespace)){#>

namespace <#=data.EntityNamespace#>
{
<#		}
		if (data.Serialization) {
#>	[DataContract(<#=dataContractAttributes#>)]
<#		} #>
	<#=code.Format(class1.TypeAttributes)#>partial class <#=class1.Name#>
	{
<#		int dataMemberIndex = 1;
		foreach(Column column in class1.Columns) {#>
		
		private <#=code.Format(column.Type)#> <#=column.Storage#>;
		[Column(Storage=@"<#=column.Storage#>"<#
				if (column.Name != column.Member) {#>, Name=@"<#=column.Name#>"<#}
				if (!String.IsNullOrEmpty(column.DbType)) {#>, DbType=@"<#=column.DbType#>"<#}
				if (!column.CanBeNull && !column.IsPrimaryKey) {#>, CanBeNull=false<#}
		#>)]
<#			if (data.Serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) {
#>		[DataMember(Order=<#=dataMemberIndex++#>)]
<#			}
#>		<#=code.Format(column.MemberAttributes)#><#=code.Format(column.Type)#> <#=column.Member#> {
			get { return <#=column.Storage#>; }
			set {
				if (<#=column.Storage#> != value) {
					<#=column.Storage#> = value;
				}
			}
		}
<#		} #>
	}
<#		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>
}
<#		}
		manager.EndBlock();
	}
}
manager.StartFooter();#>
#pragma warning restore 1591<#
manager.EndBlock(); 
manager.Process(options.FilePerEntity);#>